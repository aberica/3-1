
% image_Val  : [1, 160, 160]    input image
% kspace_val : [160, 160]       input image in frequency domain
% image_train: [10, 160, 160]   test image for training

Alpha = 0.3;

% Get absolute values of the k-space data
abs_kspace_val = abs(kspace_val);
mid = 160 / 2;

for i = 1:160
    for j = 1:160
        abs_kspace_val(i, j) = abs_kspace_val(i, j) + (1 - (i - mid)^2 - (j - mid)^2)*Alpha;
    end
end

% Flatten it into 1D array
flattened = abs_kspace_val(:);

% Sort in descending order and get indices
[~, sorted_indices] = sort(flattened, 'descend');

% Initialize mask
mask = zeros(size(kspace_val));

% Flatten mask as well
flattened_mask = mask(:);

% Set highest M entries to 1
flattened_mask(sorted_indices(1:M)) = 1;

% Reshape mask back to original shape
mask = reshape(flattened_mask, size(mask));


disp("sum : "+ sum(mask, 'all')+", and it should be "+M);

figure;
imshow(mask,'Colormap',gray);
assert(sum(mask,'all')==M);